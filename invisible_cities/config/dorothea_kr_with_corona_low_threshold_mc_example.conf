#!/usr/bin/python
# dorothea.conf

# Dorothea computes a KDST after selecting PMAPS according to an S12 selector.
# city.conf

# set input and output files
import os
files_in = os.path.join(os.environ['IC_DATA'], 'NEXT_v1_00_05', 'Kr',
                        'dst_NEXT_v1_00_05_Kr_ACTIVE_0_0_7bar_PMP_10000.h5')

file_out = os.path.join(os.environ['IC_DATA'], 'NEXT_v1_00_05', 'Kr',
                        'dst_NEXT_v1_00_05_Kr_ACTIVE_0_0_7bar_KDST_10.h5')

#_dir_prod  = '/Users/jjgomezcadenas/Projects/ICDATA/MC_PreProd_July_2017/'

#files_in = _dir_prod + 'dst_NEXT_v1_00_05_Kr_ACTIVE_0_0_7bar_PMP_1000.h5'
#file_out = _dir_prod + 'dst_NEXT_v1_00_05_Kr_ACTIVE_0_0_7bar_KDST_1000.h5'

# compression library
compression = 'ZLIB4'

# run number 0 is for MC
run_number = -4446

# How frequently to print events
nprint = 1

# max number of events to run
nmax =  100

# set to True if run all events in input files
run_all = False

verbosity = 0

skip = 0

# s12 selector
drift_v = 1 * mm / mus # Expected drift velocity

s1_nmin     =    1
s1_nmax     =    1
s1_emin     =    1 * pes # Min S1 energy integral
s1_emax     = 1e+6 * pes # Max S1 energy integral
s1_wmin     =  100 * ns # min width for S1
s1_wmax     =  600 * ns # Max width
s1_hmin     =    0 * pes # Min S1 height
s1_hmax     = 1e+6 * pes # Max S1 height
s1_ethr     =  0.5 * pes # Energy threshold for S1

s2_nmin     =     1
s2_nmax     =     10       # Max number of S2 signals
s2_emin     =  1e+3 * pes # Min S2 energy integral
s2_emax     =  1e+6 * pes # Max S2 energy integral in pes
s2_wmin     =     3 * mus # Min width
s2_wmax     =   500 * ms  # Max width IN MS!!!
s2_hmin     =     0 * pes # Min S2 height
s2_hmax     =  1e+6 * pes # Max S2 height
s2_nsipmmin =     1       # Min number of SiPMs touched
s2_nsipmmax =   100       # Max number of SiPMs touched
s2_ethr     =     1 * pes # Energy threshold for S2


qthr           =   1 * pes # charge threshold, ignore all SiPMs with less than Qthr pes
qlm            =   5 * pes # every Cluster must contain at least one SiPM with charge >= Qlm. This cut is irrelevant if one uses barycenter

# lm_radius = radius, find new_local_maximum by taking the barycenter of SiPMs within
#             lm_radius of the max sipm. new_local_maximum is new in the sense that the
#             prev loc max was the position of hottest_sipm. (Then allow all SiPMs with
#             new_local_maximum of new_local_maximum to contribute to the pos and q of the
#             new cluster).

# ***In general lm_radius should typically be set to 0, or some value slightly
# larger than pitch or pitch*sqrt(2).***
#
# ***If lm_radius is set to a negative number, the algorithm will simply return
# the overall barycenter all the SiPms above threshold.***
lm_radius      =   0 * mm  # by default, use 3x3 corona. Set this number to -1 to use barycenter

# new_lm_radius = radius, find a new cluster by calling barycenter() on pos/qs of SiPMs within
#                 new_lm_radius of new_local_maximum
new_lm_radius  =  15 * mm  # by default, use 3 x3 corona. Set to -1 to use barycenter.
msipm          =   1 # minimum number of SiPMs in a Cluster
